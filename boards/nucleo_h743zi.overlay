/* Ask chatgpt if u don't understand something */

/ {
    /* Grabber and shooter servos are ser-110x model */
    dropper_servo: dropper_servo {
        compatible = "pwm-servo";
        pwms = <&pwm2 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(850)>;
        max-pulse = <PWM_USEC(2100)>; /* This sus value works */
    };

    /* The grabber servo is the ser-120x model */
    grabber_servo: grabber_servo {
        compatible = "pwm-servo";
        pwms = <&pwm3 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(800)>;
        max-pulse = <PWM_USEC(2100)>;
    };

    shooter_servo: shooter_servo {
        compatible = "pwm-servo";
        pwms = <&pwm4 2 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(850)>;
        max-pulse = <PWM_USEC(2250)>;
    };
};

/* Define timers for the pwm; pwm12 is already defined on pin pb14 by default
 * in zephyr's Nucleo f767zi dts file on their github.
 */
&timers2{
    st,prescaler = <10000>;
    status = "okay";

    pwm2: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch1_pa5>;
        pinctrl-names = "default";
    };
};

&timers3{
    st,prescaler = <10000>;
    status = "okay";

    pwm3: pwm {
        status = "okay";
        pinctrl-0 = <&tim3_ch1_pa6>;
        pinctrl-names = "default";
    };
};

&timers4{
    st,prescaler = <10000>;
    status = "okay";

    pwm4: pwm {
        status = "okay";
        pinctrl-0 = <&tim4_ch2_pb7>;
        pinctrl-names = "default";
    };
};

/* 
 * Communicate with the killswitch as a gpio "button" on pin PH1 
 * Communicate with the DVL switch (that connects DVL's wires to 
 *   nucleos uart pins) on pin PA14
 */
/ {
    buttons {
        compatible = "gpio-keys";
        killswitch_button: killswitch_button {
            /* Pin PG4 -> gpiog 4 */
            gpios = <&gpiog 4 GPIO_ACTIVE_HIGH>;
            label = "Killswitch modeled as a button";
        };

        dvl_switch: dvl_switch {
            /* Pin PG7 -> gpiog 7 */
            gpios = <&gpiog 7 GPIO_ACTIVE_HIGH>;
            label = "DVL switch that connects DVL wires to nucleos pins.";
        };
    };
};

&uart4 {
    pinctrl-0 = <&uart4_tx_pb9 &uart4_rx_pb8>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

&usart1 {
    pinctrl-0 = <&usart1_tx_pa9 &usart1_rx_pa10>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

&usart2 {
    pinctrl-0 = <&usart2_tx_pd5 &usart2_rx_pd6>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

&usart3 {
    pinctrl-0 = <&usart3_tx_pd8 &usart3_rx_pd9>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

&uart7 {
    pinctrl-0 = <&uart7_tx_pf7 &uart7_rx_pf6>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};


/*
&i2c4 {
    pinctrl-0 = <&i2c4_scl_pd12 &i2c4_sda_pd13>;
    pinctrl-names = "default";
    status = "okay";
    clock-frequency = <I2C_BITRATE_STANDARD>;
    ms5837@76 {
        compatible = "meas,ms5837";
        reg = <0x76>;
    };
};
*/

/*
can1 already enabled, alias zephyr,canbus = &can1;

&can1 {
    pinctrl-0 = <&can1_rx_pd0 &can1_tx_pd1>;
    pinctrl-names = "default";
    bus-speed = <125000>;
    status = "okay";
};

&can2 {
    pinctrl-0 = <&can2_rx_pb5 &can2_tx_pb6>;
    pinctrl-names = "default";
    bus-speed = <125000>;
    status = "okay";
}
*/

/*
 * Read the pressure sensor, via an analog to digital converter 
 * Use pin PC3, which has ADC3_INP1
 * https://github.com/micropython/micropython/blob/master/ports/stm32/boards/stm32h743_af.csv
 */
/ {
    zephyr,user {
        /* adjust channel number according to pinmux in board.dts */
        io-channels = <&adc3 1>;
    };
};

&adc3 {
    #address-cells = <1>;
    #size-cells = <0>;

    channel@1 {
        reg = <1>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
        zephyr,resolution = <16>;
    };
};
