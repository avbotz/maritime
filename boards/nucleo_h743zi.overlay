/* Ask chatgpt if u don't understand some of this stuff */

/* 
 * Communicate with the servos (that control dropper, grabber, shooter) 
 * via pwm 
 */

/ {
    /* Dropper and shooter servos are ser-110x model */
    dropper_servo: dropper_servo {
        compatible = "pwm-servo";
        pwms = <&pwm1 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(850)>;
        max-pulse = <PWM_USEC(2220)>; /* This sus value works */
    };

    /* The grabber servo is the ser-120x model */
    grabber_servo: grabber_servo {
        compatible = "pwm-servo";
        pwms = <&pwm3 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(800)>;
        max-pulse = <PWM_USEC(2100)>;
    };

    shooter_servo: shooter_servo {
        compatible = "pwm-servo";
        pwms = <&my_pwm4 4 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(850)>;
        max-pulse = <PWM_USEC(2220)>;
    };
};

/* 
 * Map ports to their respective timers: https://github.com/micropython/micropython/blob/master/ports/stm32/boards/stm32f767_af.csv
 */

&timers2{
    st,prescaler = <10000>;
    status = "okay";
    pwm1: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch1_pa0>;
        pinctrl-names = "default";
    };

    pwm3: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch3_pa2>;
        pinctrl-names = "default";
    };

    my_pwm4: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch4_pa3>;
        pinctrl-names = "default";
    };
};

/* Communicate with the killswitch as a gpio "button" on pin PH1 */
/ {
    buttons {
        compatible = "gpio-keys";
        killswitch_button: killswitch_button {
            /* Pin PH1 -> gpioh 1 */
            gpios = <&gpioh 1 GPIO_ACTIVE_HIGH>;
            label = "Killswitch modeled as a button";
        };
    };  
};

/* Communicate with DVL via uart */
&uart4 {
    pinctrl-0 = <&uart4_tx_pb9 &uart4_rx_pb8>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

/* Communicate with AHRS via uart */
&usart1 {
    pinctrl-0 = <&usart1_tx_pb6 &usart1_rx_pa10>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

/* Communicate with pressure sensor via i2c */
&i2c1 {
    status = "disabled";
};

&i2c2 {
    pinctrl-0 = <&i2c2_scl_pb10 &i2c2_sda_pb11>;
    pinctrl-names = "default";
    status = "okay";
    clock-frequency = <I2C_BITRATE_STANDARD>;
    ms5837@76 {
        compatible = "meas,ms5837";
        reg = <0x76>;
    };
};

/* Communicate with thrusters via CAN */
/*
can1 already enabled, alias zephyr,canbus = &can1;

&can1 {
    pinctrl-0 = <&can1_rx_pd0 &can1_tx_pd1>;
    pinctrl-names = "default";
    bus-speed = <125000>;
    status = "okay";
};
*/