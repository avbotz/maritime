/* Connect to servos via pwm; servos used for dropper, grabber, shooter */
/ {
    servo1: servo_motor_1 {
        compatible = "pwm-servo";
        /* Format is which pwm, channel number, pulse length, polarity */
        pwms = <&pwm1 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(850)>;
        max-pulse = <PWM_USEC(2350)>;
    };

    servo2: servo_motor_2 {
        compatible = "pwm-servo";
        pwms = <&pwm2 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(850)>;
        max-pulse = <PWM_USEC(2350)>;
    };

    servo3: servo_motor_3 {
        compatible = "pwm-servo";
        pwms = <&pwm3 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(850)>;
        max-pulse = <PWM_USEC(2350)>;
    };
};

/* Connect to thrusters via pwm */
/ {
    thruster1: thruster_motor_1 {
        compatible = "pwm";
        pwms = <&pwm4 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };

    thruster2: thruster_motor_2 {
        compatible = "pwm";
        pwms = <&pwm5 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };

    thruster3: thruster_motor_3 {
        compatible = "pwm";
        pwms = <&pwm6 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };

    thruster4: thruster_motor_4 {
        compatible = "pwm";
        pwms = <&pwm7 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };

    thruster5: thruster_motor_5 {
        compatible = "pwm";
        pwms = <&pwm8 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };

    thruster6: thruster_motor_6 {
        compatible = "pwm";
        pwms = <&pwm9 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };

    thruster7: thruster_motor_7 {
        compatible = "pwm";
        pwms = <&pwm10 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };

    thruster8: thruster_motor_8 {
        compatible = "pwm";
        pwms = <&pwm11 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1100)>;
        max-pulse = <PWM_USEC(1900)>;
    };
};

/* 
 * Define timers for each pwm device.
 * I did the pwm numbering very susly, so disregard it. 
 * Just look at the timer, channel, and pin (eg. tim2, ch1, pa5 respectively)
 * Wire it up so that the respective thruster goes to that pin 
 * (eg. thruster2 -> timer2 -> pwm2 -> pin pb15 on the nucleo board)
 */
&timers1 {
    pwm1: pwm {
        status = "okay";
        pinctrl-0 = <&tim3_ch1_pc6>;
        pinctrl-names = "default";
    };
};

&timers2 {
    pwm2: pwm {
        status = "okay";
        pinctrl-0 = <&tim1_ch3n_pb15>;
        pinctrl-names = "default";
    };
};

&timers3 {
    pwm3: pwm {
        status = "okay";
        pinctrl-0 = <&tim1_ch1n_pb13>;
        pinctrl-names = "default";
    };
};

&timers4 {
    pwm4: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch1_pa15>;
        pinctrl-names = "default";
    };
};

&timers5 {
    pwm5: pwm {
        status = "okay";
        pinctrl-0 = <&tim3_ch2_pc7>;
        pinctrl-names = "default";
    };
};

&timers6 {
    pwm6: pwm {
        status = "okay";
        pinctrl-0 = <&tim3_ch2_pb5>;
        pinctrl-names = "default";
    };
};

&timers7 {
    pwm7: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch2_pb3>;
        pinctrl-names = "default";
    };
};

&timers8 {
    pwm8: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch1_pa5>;
        pinctrl-names = "default";
    };
};

&timers9 {
    pwm9: pwm {
        status = "okay";
        pinctrl-0 = <&tim3_ch1_pa6>;
        pinctrl-names = "default";
    };
};

&timers10 {
    pwm10: pwm {
        status = "okay";
        pinctrl-0 = <&tim3_ch2_pa7>;
        pinctrl-names = "default";
    };
};

&timers11 {
    pwm11: pwm {
        status = "okay";
        pinctrl-0 = <&tim4_ch3_pd14>;
        pinctrl-names = "default";
    };
};

/* Read the killswitch pin via gpio (idk what this means) */
/ {
    killswitch: gpio {
        compatible = "gpio-keys";
        gpios = <&gpio0 31 GPIO_ACTIVE_HIGH>;
        label = "AVBOTZ killswitch";
    };
};

/* Communicate with DVL via uart */
&uart5 {
    pinctrl-0 = <&uart5_tx_pb9 &uart5_rx_pb8>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

/* Communicate with pressure sensor via i2c */
&i2c1 {
    status = "disabled";
};

&i2c2 {
    pinctrl-0 = <&i2c2_scl_pb10 &i2c2_sda_pb11>;
    pinctrl-names = "default";
    status = "okay";
    clock-frequency = <I2C_BITRATE_STANDARD>;
    ms5837@76 {
        compatible = "meas,ms5837";
        reg = <0x76>;
    };
};

/* Communicate with servos via PWM */


/* Communicate with thrusters via CAN */
/*
can1 already enabled, alias zephyr,canbus = &can1;

&can1 {
    pinctrl-0 = <&can1_rx_pd0 &can1_tx_pd1>;
    pinctrl-names = "default";
    bus-speed = <125000>;
    status = "okay";
};
*/